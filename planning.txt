=========
GAME FLOW
=========

On each time step:
  1-Remove filled rows
    2-Set gravity for remaining blocks accordingly
  OR
  1-Move gravitized blocks down
    2-Check for boundries and respond accordingly
    2-Check for collisions and respond accordingly
  OR
  1-Drop a new piece
    2-Check boundries
    2-Check collisions

=======
CLASSES
=======

GameObject = {
  -gamePosToCoord(num gamePos): num // Converts the given gamePos into a pixel coordinate.
  -coordToGamePos(num coord): num // Converts the given pixel coordinate into a gamePos.
}

LogicHandler extends GameObject = {
  stepDuration: // num; The duration in milliseconds between game steps.
  timer: // Phaser.Timer; The timer that determines the length of each game step.
  currentPiece: // Piece; The current, actively-falling piece.
  nextPiece: // ShapeInfo; The next piece to drop once the current piece has settled.
  allPossiblePieces: // ShapeInfo[]; Holds ShapeInfo objects for all possible types of Pieces in the game.
  blocks: // Block[]; Holds all Block objects on the game board that are not part of the currentPiece. Once current piece has settled, its blocks get added too.
  numOfTimeSteps: // num; Number of time steps elapsed since the start of the game.
  score: // num; The current player score.

  +LogicHandler(ShapeInfo[] allPossiblePieces): void // Create a new LogicHandler with the given Piece set.

  +start(): void // Starts the timer to call executeStep every stepDuration seconds.
  +resume(): void // Resumes the timer event if it was stopped.
  +stop(): void // Pauses the timer events.
  +setStepDuration(num milliseconds): void // Removes all events on the timer. Sets this.stepDuration to a new value. Adds a new loop event to the timer.
  +executeStep(): void // Executes the subroutines for 1 time step of the game.

  +moveGravitizedBlocks(): boolean // Moves gravitized GameObjects down 1 game unit and sets their gravity to 0. Returns true if anything was moved.
  +removeFilledRows(): boolean // Checks for completed rows, and flags all blocks in row to be removed. Returns true if a completed row was found.
  +dropPiece(): void // Drops a new Piece.

  +updateAllGameObjects() : void // Update all GameObjects on the board (moves the sprite, removes marked blocks).

  +pickRandomPiece(): ShapeInfo // Returns a randomly selected Piece from allPossiblePieces.

  +checkBoundries(): string // Check if a block has breached the game board boundries. Returns "none" if no boundries breached. Returns "left" if left boundry breached. Returns "right" if right boundry breached. Returns "ground" if ground is breached. Returns "ceiling" if ceiling is breached.
  +checkCollisions(): boolean // Returns true if any Blocks in currentPiece are overlapping any Blocks in this.blocks, otherwise returns false.
}

Block extends GameObject = {
  sprite: // Phaser.Sprite; Phaser Sprite object associated with this block.
  gamePosX: // num; Horizontal position of this block on the game board in block units. 0 is the left most position.
  gamePosY: // num; Vertical position of this block on the game board in block units. 0 is the top most position.
  isGravitized: // boolean;  Will gravity pull down this block by 1 unit in the next time step?
  isRemoved: // boolean; Will this block be removed from the game in the next time step?

  +Block(num gamePosX, num gamePosY, string color, boolean initGravitation): Block // Returns a Block object with the given parameters.
  +moveUp(): void // Moves this block up by 1 game unit.
  +moveDown(): void // Moves this block down by 1 game unit.
  +moveRight(): void // Moves this block right by 1 game unit.
  +moveLeft(): void // Moves this block left by 1 game unit.
  +update(): void // Apply this blocks game properties to its sprite.
  +destroy(): void // Destroys the associated Phaser sprite.
}

Piece extends GameObject = {
  blocks: // Block[]; Holds all blocks that belong to this piece.
  shapeInfo:
    gridWidth: // num; Width of all 2D arrays under orientation.
    gridLength: // num; Length of all 2D arrays under orientation.
    orientation:
      UP: // num[][]; A 2D array of nums that describes the shape of this piece in the UP orientation.
      RIGHT: // num[][]; A 2D array of nums that describes the shape of this piece in the LEFT orientation.
      DOWN: // num[][]; A 2D array of nums that describes the shape of this piece in the DOWN orientation.
      LEFT: // num[][]; A 2D array of nums that describes the shape of this piece in the RIGHT orientation.
  currentOrientation: // string; the current orientation of the piece.
  gamePosX: // num; Horizontal position of the top-left block of this piece on the game board in block units. 0 is the left most position.
  gamePosY: // num; Vertical position of the top-left block of this piece on the game board in block units. 0 is the top most position.
  isGravitized: // boolean;  Will gravity pull down all blocks in this piece by 1 unit in the next time step?

  +Piece(ShapeInfo shapeInfo, num gamePosX, num gamePosY, string initOrientation, boolean initGravity): Piece // Returns a Piece object with the given parameters.
  +remakeBlocks(): void // Refresh this Piece's Blocks by deleting them then creating them anew.
  +moveUp(): void // Moves all blocks in this piece up by 1 game unit.
  +moveDown(): void // Moves all blocks in this piece down by 1 game unit.
  +moveRight(): void // Moves all blocks in this piece right by 1 game unit.
  +moveLeft(): void // Moves all blocks in this piece left by 1 game unit.
  +rotateRight(): void // Cycles the Piece's currentOrientation (UP, RIGHT, DOWN, LEFT) to the right.
  +rotateLeft(): void // Cycles the Piece's currentOrientation (UP, RIGHT, DOWN, LEFT) to the left.
  +update(): void // Apply this Piece's game properties to its block's sprites.
  +setGravitized(boolean value): void // Sets isGravitized for all Block objects in this Piece to value.
  +settle(): Block[] // Sets isGravitized for all Block objects in this Piece to false. Empties and returns its Blocks.
}

