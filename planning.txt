=========
GAME FLOW
=========

On each time step:
  1-Move gravitized blocks down
  OR
  1-Remove filled rows
  OR
  1-Drop a new piece

  2-Check conditions and set gravity on remaining blocks
    2a-Check conditions on all blocks[], set gravity accordingly.
    2b-Check conditions on currentPiece.blocks[], set gravity accordingly.

=======
CLASSES
=======

GameObject = {
  -gamePosToCoord(num gamePos): num // Converts the given gamePos into a pixel coordinate.
  -coordToGamePos(num coord): num // Converts the given pixel coordinate into a gamePos.
}

LogicHandler extends GameObject = {
  currentPiece: // Piece; The current, actively-falling piece.
  nextPiece: // Piece; The next piece to drop once the current piece has settled.
  allPossiblePieces: // ShapeInfo[]; Holds ShapeInfo objects for all possible types of Pieces in the game.
  blocks: // Block[]; Holds all Block objects on the game board that are not part of the currentPiece. Once current piece has settled, its blocks get added too.
  numOfTimeSteps: // num; Number of time steps elapsed since the start of the game.
  score: // num; The current player score.

  +LogicHandler(ShapeInfo[] allPossiblePieces): void // Create a new LogicHandler with the given Piece set.

  +executeStep(): void // Executes the subroutines for 1 time step of the game.

  +moveGravitizedBlocks(): void // Moves gravitized blocks down 1 game unit.
  +updateBlockPositions() : void // Move blocks whose gamePos's have changed.

  +checkCompletedRows(): void // Check for completed rows, mark all blocks in said rows for removal, and increment the score.
  +deleteRemovedBlocks(): void // Deletes blocks that have been flagged for removal from the game.

  +pickNextPiece(): Piece // Returns a randomly selected Piece from allPossiblePieces.
  +dropNextPiece(): void // Transfer currentPiece blocks to blocks[] and delete currentPiece. Pick a piece from allPossiblePieces and deploy a copy of it as currentPiece.

  +checkBlockConditions(): void // Check ground conditions on all blocks not in currentPiece; set gravity accordingly.
  +checkCurrentPieceConditions() void // Check ground conditions on all currentPiece blocks; set gravity accordingly.
}

Block extends GameObject = {
  sprite: // Phaser.Sprite; Phaser Sprite object associated with this block.
  gamePosX: // num; Horizontal position of this block on the game board in block units. 0 is the left most position.
  gamePosY: // num; Vertical position of this block on the game board in block units. 0 is the top most position.
  isGravitized: // boolean;  Will gravity pull down this block by 1 unit in the next time step?
  isRemoved: // boolean; Will this block be removed from the game in the next time step?

  +Block(num gamePosX, num gamePosY, string color, boolean initGravitation): Block // Returns a Block object with the given parameters.
  +destroy(): void // Destroys the Blocks associated sprite.
}

Piece extends GameObject = {
  blocks: // Block[]; Holds all blocks that belong to this piece.
  shapeInfo:
    gridWidth: // num; Width of all 2D arrays under orientation.
    gridLength: // num; Length of all 2D arrays under orientation.
    orientation:
      UP: // num[][]; A 2D array of nums that describes the shape of this piece in the UP orientation.
      RIGHT: // num[][]; A 2D array of nums that describes the shape of this piece in the LEFT orientation.
      DOWN: // num[][]; A 2D array of nums that describes the shape of this piece in the DOWN orientation.
      LEFT: // num[][]; A 2D array of nums that describes the shape of this piece in the RIGHT orientation.
  currentOrientation: // string; the current orientation of the piece.
  gamePosX: // num; Horizontal position of the top-left block of this piece on the game board in block units. 0 is the left most position.
  gamePosY: // num; Vertical position of the top-left block of this piece on the game board in block units. 0 is the top most position.
  isGravitized: // boolean;  Will gravity pull down all blocks in this piece by 1 unit in the next time step?
  isRemoved: // boolean; Will all blocks in this piece be removed from the game in the next time step?

  +Piece(ShapeInfo shapeInfo, num gamePosX, num gamePosY, string initOrientation, boolean initGravity): Piece // Returns a Piece object with the given parameters.
  +remakeBlocks(): void // Refresh this Piece's Blocks by deleting them then creating them anew.
  +moveDown(): void // Moves all blocks in this piece down by 1 game unit.
  +moveRight(): void // Moves all blocks in this piece right by 1 game unit.
  +moveLeft(): void // Moves all blocks in this piece left by 1 game unit.
  +rotate(): void // Cycles the Piece's currentOrientation (UP, RIGHT, DOWN, LEFT).
  +settle(): Block[] // Makes the Piece stationary, empties and returns its blocks.
}

